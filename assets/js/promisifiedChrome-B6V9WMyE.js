import{a as e,g as s}from"./index-DY0DW88M.js";const o={tabs:{query:e=>new Promise((o=>s().tabs.query(e,o))),getCurrent:()=>new Promise((e=>s().tabs.getCurrent(e))),create:e=>new Promise((o=>s().tabs.create(e,o))),update:(e,o)=>new Promise((n=>s().tabs.update(e,o,n))),group:e=>new Promise((o=>s().tabs.group(e,o))),move:(e,o)=>new Promise((n=>s().tabs.move(e,o,n))),remove:e=>new Promise((o=>s().tabs.remove(e,o))),moveToWindow:async(e,s)=>{e&&s&&await o.tabs.move(e,{windowId:s,index:-1})},openUrl:(e,n=!1,i=!1)=>n?o.tabs.create({url:e,active:i}):new Promise((o=>s().tabs.update({url:e},o)))},windows:{create:e=>new Promise((o=>s().windows.create(e,o))),remove:e=>new Promise((o=>s().windows.remove(e,o))),removeAndWaitForSessionChange:n=>{let i;return Promise.race([new Promise((e=>{i=e,s().sessions.onChanged.addListener(i),o.windows.remove(n)})),(async()=>{throw await e.delay(5e3),"No change in chrome sessions, could not get restore key for window or tab"})()]).finally((()=>{s().sessions.onChanged.removeListener(i)}))},update:(e,o)=>new Promise((n=>s().windows.update(e,o,n))),get:e=>new Promise((o=>s().windows.get(e,{},o))),getAll:e=>new Promise((o=>s().windows.getAll(e,o))),getCurrent:()=>new Promise((e=>s().windows.getCurrent(e)))},sessions:{restoreWindow:e=>new Promise((o=>s().sessions.restore(e,(e=>{(null==e?void 0:e.window)?o(null==e?void 0:e.window):(null==e?void 0:e.tab)?s().windows.get(e.tab.windowId||0,{},o):o(void 0)})))),getRecentlyClosedWindowSessionIds:()=>new Promise((e=>s().sessions.getRecentlyClosed({},(s=>{const o=[];s.forEach((e=>{var s;"window"in e&&(null==(s=e.window)?void 0:s.sessionId)&&o.push(e.window.sessionId)})),e(o)})))),getLastClosedSessionId:()=>new Promise((e=>s().sessions.getRecentlyClosed({maxResults:1},(s=>{var o,n,i,r;const t=(null==(n=null==(o=s[0])?void 0:o.window)?void 0:n.sessionId)||(null==(r=null==(i=s[0])?void 0:i.tab)?void 0:r.sessionId);if(!t)throw new Error("Could not get session ID from closed window");e(t)}))))},permissions:{request:e=>new Promise((o=>s().permissions.request(n(e),o))),contains:async e=>new Promise((o=>s().permissions.contains(n(e),o)))},topSites:{get:()=>new Promise((e=>s().topSites.get(e)))}},n=e=>JSON.parse(JSON.stringify(e));e.isFirefox()&&(o.permissions.contains=e=>s().permissions.contains(n(e)),o.permissions.request=e=>s().permissions.request(n(e))),e.isSafari()&&(o.permissions.contains=e=>{var s;return(null==(s=e.permissions)?void 0:s.includes("tabs"))?chrome.permissions.getAll().then((s=>{var o,n;return((null==(o=s.origins)?void 0:o.includes("*://*/*"))&&(null==(n=e.permissions)?void 0:n.every((e=>{var o;return null==(o=s.permissions)?void 0:o.includes(e)}))))??!1})):o.permissions.contains(n(e))},o.permissions.request=async e=>{var i;const r=await s().permissions.request(n(e));return(null==(i=e.permissions)?void 0:i.includes("tabs"))&&r?o.permissions.contains(n(e)):r});export{o as p};