import{l as e}from"./index-DY0DW88M.js";import{computed as t}from"./reactiveCustomization-B8WwDagp.js";import{s as i}from"./Logger-CErMjlBd.js";import{e as s}from"./DataSyncService-BnTv72BN.js";const r={data:()=>({id:"",archived:null,selected:!1,editProps:{}}),methods:{updateData(e){this.props.forEach((t=>this[t]=e[t])),e.id&&(this.id=e.id)},revertChanges(){this.editProps={}},getChanges(){const e=(e,t)=>e.getTime()===t.getTime();let t=[];return this.editProps&&this.props.forEach((i=>{if(Array.isArray(this[i])||Array.isArray(this.editProps[i]))m.utils.arraysAreEqual(this[i],this.editProps[i])||t.push(i);else if(this[i]instanceof Date&&this.editProps[i]instanceof Date)e(this[i],this.editProps[i])||t.push(i);else if("object"==typeof this.editProps[i]&&null!==this.editProps[i])for(let s in this.editProps[i]){let r,a=this[i][s],o=this.editProps[i][s];r=a instanceof Date&&o instanceof Date?!e(a,o):a!==o,r&&t.push(`${i}.${s}`)}else this[i]!==this.editProps[i]&&t.push(i)})),t},commitChanges(){this.beforeCommitChanges&&this.beforeCommitChanges(),this.props.forEach((e=>{void 0!==this.editProps[e]&&(this[e]=this.editProps[e])})),this.revertChanges()},copyProperties(){for(let e of this.props)Array.isArray(this[e])?this.$set(this.editProps,e,[...this[e]]):"object"==typeof this[e]&&null!==this[e]?this.$set(this.editProps,e,{...this[e]}):this.$set(this.editProps,e,this[e])}}};function a(){return new e({loaded:!1,items:{}})}const o={mixins:[{unreactive:()=>({names:{}}),computed:{nameLCP(){return this.names.lowerCasePlural||this.type.replace(/([A-Z])/g," $1").trim().toLowerCase()},nameLCS(){return this.names.lowerCaseSingular||i(this.nameLCP)},nameCP(){return this.names.capitalizedPlural||m.utils.capitalizeWords(this.nameLCP)},nameCS(){return this.names.capitalizedSingular||m.utils.capitalizeWords(this.nameLCS)},fullNameLCP(){return this.names.fullLowerCasePlural||this.nameLCP},fullNameLCS(){return this.names.fullLowerCaseSingular||i(this.fullNameLCP)},fullNameCP(){return this.names.fullCapitalizedPlural||m.utils.capitalizeWords(this.fullNameLCP)},fullNameCS(){return this.names.fullCapitalizedSingular||m.utils.capitalizeWords(this.fullNameLCS)}}}],data:()=>({collection:new a}),unreactive:()=>({type:"",Model:null,dataService:null,names:{}}),computed:{emptyMessage(){return`No ${this.nameLCP} yet`},data(){return this.collection.loaded||this.get(),this.collection},visible(){return t[this.visibleSetting]}},created(){this.dataService||console.warn('No dataService property detected, please connect a dataService property in "unreactive"'),s.$on(this.type+":refresh",this.refresh),s.$on("resetCollections",this.resetCollection)},destroyed(){s.$off(this.type+":refresh",this.refresh),s.$off("resetCollections",this.resetCollection)},methods:{get({queryParams:e,mode:t}={}){return new Promise(((i,s)=>{this.dataService.get({queryParams:e,mode:t,success:e=>{this.addItemsToCollection(e),i()},failure:e=>{console.error(e),s(e)}})}))},refresh({queryParams:e,retry:t,notifyUserOnFailure:i}={}){return this.dataService.refresh({queryParams:e,retry:t,notifyUserOnFailure:i})},addItemsToCollection(e,t=this.collection){const i=t.items,s=e.map((e=>e.id));return Object.keys(i).forEach((e=>{s.includes(e)||this.$delete(i,e)})),e.forEach((e=>{const t=e.id;let s;t in i?s=i[t]:(s=new this.Model,this.$set(i,t,s)),s.updateData(e)})),this.$set(t,"loaded",!0),e},add(e){const t=e.id=m.utils.uuidv4();this.$set(this.collection.items,t,e);const i=this.getAddRequestBody(e);return this.dataService.add(t,i).then((t=>(this.capture&&this.capture(this.fullNameLCS+" add",{context:{item:e}}),t))).catch((e=>{throw this.$delete(this.collection.items,t),e}))},update(e,t){const i=this.getUpdateRequestBody(e,t);return this.dataService.update(e.id,i).then((t=>(this.capture&&this.capture(this.fullNameLCS+" edit",{context:{item:e}}),t)))},delete(e){return this.dataService.delete(e.id).then((t=>(this.capture&&this.capture(this.fullNameLCS+" delete",{context:{item:e}}),this.$delete(this.collection.items,e.id),t)))},archive(e){return this.$set(e,"archived",!0),this.dataService.update(e.id,{archived:!0}).then((t=>(this.capture&&this.capture(this.fullNameLCS+" archive",{context:{item:e}}),t))).catch((t=>{throw this.$set(e,"archived",!1),t}))},unarchive(e){return this.$set(e,"archived",!1),this.dataService.update(e.id,{archived:!1}).then((t=>(this.capture&&this.capture(this.fullNameLCS+" unarchive",{context:{item:e}}),t))).catch((t=>{throw this.$set(e,"archived",!0),t}))},getAddRequestBody(e){const t={};return e.props.forEach((i=>{void 0!==e.editProps[i]&&(t[i]=e.editProps[i])})),t},getUpdateRequestBody(e){const t={};return e.getChanges().forEach((i=>{const s=i.split(".");1===s.length?t[i]=e.editProps[i]:2===s.length&&(t[s[1]]=e.editProps[s[0]][s[1]])})),t},resetCollection(){this.collection=new a}}},h={data:()=>({mockCollection:new a}),computed:{data(){return this.mockCollection.loaded?this.mockCollection:(this.collection.loaded||this.get(),this.collection)}},methods:{mockData(e){this.addItemsToCollection(e,this.mockCollection),this.mockCollection.loaded=!0},clearMockData(){this.mockCollection=new a}}};export{o as b,r as i,h as m};